from libs import optimizer
from libs.optimizer import Individual

from .simulator.const import Settings
from .task import Task

from .simulator.utils import rand_robot_pos, rand_food_pos
from .simulator.const import ROBOT_SIZE, FOOD_SIZE, NEST_SIZE
from .simulator.objects.nest import NestBuilder
from .simulator.objects.robot import RobotBuilder, BrainBuilder
from .simulator.objects.food import FoodBuilder, ReFood
from .simulator.world import WorldBuilder


class TaskGenerator(optimizer.TaskGenerator):
    """
    TaskGenerator is responsible for generating tasks for optimization.

    The `generate` method is called for each individual.
    As a result, the TaskGenerator can share certain instances with the tasks generated by it.
    """

    def __init__(self, settings: Settings, brain_builder: BrainBuilder):
        self.settings = settings
        self.brain_builder = brain_builder

        self.robot_positions = []
        self.food_positions = []
        invalid_area = []

        # Generate static positions for robots
        for pos_and_angle in settings.Robot.POSITION:
            invalid_area.append((pos_and_angle[0], pos_and_angle[1], ROBOT_SIZE))
            self.robot_positions.append(pos_and_angle)

        # Generate static positions for food
        for pos in settings.Food.POSITION:
            invalid_area.append((*pos, FOOD_SIZE))
            self.food_positions.append(pos)

        # Generate random positions for robots
        for _ in range(settings.Robot.NUM - len(settings.Robot.POSITION)):
            self.robot_positions.append(
                rand_robot_pos(self.settings, invalid_area)
            )

        # Generate random positions for food
        invalid_area.append((*settings.Nest.POSITION, NEST_SIZE))
        for _ in range(settings.Food.NUM - len(settings.Food.POSITION)):
            self.food_positions.append(
                rand_food_pos(self.settings, invalid_area)
            )

    def generate(self, para: Individual, debug=False) -> Task:
        robot_builders = [
            RobotBuilder(self.settings, i, self.brain_builder.build(para), pos_and_angle)
            for i, pos_and_angle in enumerate(self.robot_positions)
        ]
        food_builders = [
            FoodBuilder(i, pos) for i, pos in enumerate(self.food_positions)
        ]
        nest_builder = NestBuilder(self.settings)

        w_builder = WorldBuilder(self.settings)
        w_builder.add_builders(robot_builders)
        w_builder.add_builders(food_builders)
        w_builder.add_builder(nest_builder)

        world, w_objs = w_builder.build()

        robots = [w_objs[robot_builders[i].builder_name] for i in range(len(robot_builders))]
        food = [w_objs[food_builders[i].builder_name] for i in range(len(food_builders))]
        nest = w_objs[nest_builder.builder_name]

        refood = ReFood(
            Settings.Simulation.WORLD_WIDTH,
            Settings.Simulation.WORLD_HEIGHT,
            w_builder.thickness,
            food,
            nest,
            robots
        )

        return Task(self.settings, world, nest, robots, refood, debug)
